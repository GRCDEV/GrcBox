#!/bin/bash
udev_rules_file="10-networkIfaces.rules"
hostapd_config_file="hostapd.conf"
hosts_file="hosts"
dnsmasq_config_file="dnsmasq.conf"
network_config_file="interfaces.new"
ad_hoc_config_file="grcBoxAdHoc"
ad_hoc_ssid="grcBoxAdHoc"
jni_lib="/usr/lib/jni/lib"

#Default config fos hostapd daemon
#The interface line will be added later
#No password
# ssid inner_iface channel
function get_hostapd_config {
    ssid=$1;
    inner_iface=$2;
    channel=$3;
    echo "interface='${inner_iface}'
logger_syslog=1
logger_syslog_level=2
logger_stdout=1
logger_stdout_level=2
ctrl_interface=/var/run/hostapd
ctrl_interface_group=0
ssid=${ssid}
country_code=ES
hw_mode=g
channel=${channel}
max_num_sta=5
";
}

#New section to add to the network configuration
#/etc/network/interfaces
#network_config(iface, ipAddress)
function get_network_config { 
    iface=${1};
    ip=${2};
    echo 'allow-hotplug '${iface}'
iface '${iface}' inet static
    hostapd /etc/hostapd/hostapd.conf
    address '${ip}'
    netmask 255.255.255.0'
}

#Create the dnsmasq configure file
# $1 listen on interface
# $2 Network IPv4 address
function get_dnsmasq_config {
    iface=$1;
    net_ip_addr=$2;
    ip_range="${net_ip_addr%.*}.50,${net_ip_addr%.*}.55"
    echo 'domain-needed
interface='${iface}'
dhcp-range='${ip_range}',12h'
}

#Return a NetworkManager network configuration
#parameters:
#$1 SSID: name of the network
#$2 host Ip address
#$3 band (a, bg)
#$4 channel
function get_adhoc_net_config {
    m_ssid="$1";
    m_ipAddr="$2";
    m_band="$3"
    m_channel="$4";
    echo '[connection]
id='$m_ssid'
uuid=a2047af8-bc14-492e-9132-cd67e563d434
type=wifi
timestamp=1414165938

[wifi]
ssid='${m_ssid}'
mode=adhoc
band='$m_band'
channel='$m_channel'

[ipv6]
method=auto

[ipv4]
method=manual
address1='$m_ipAddr'/24
'
}

echo -e "_______________________________________________________________________________
* This is the GRCBox installation script.                                     *
* This script will guide you through the GrcBox configuration.                *

#############################################################################
## By default it creates configuration files in the local directory.
## Use -P to store configuration files and change the system 
## configuration.
#############################################################################

It will cover the following steps:
1) Detect your USB WiFi dongles and assign them permanent names
2) Give a new SSID to your GrcBox's inner network and configure the hostapd
daemon with the default connfiguration
3) Assign a static IP address to your inner interface and configure dnsmasq to
resolve the name grcbox to that address
4) Check the RockSaw  Library installation
5) Configure an Ad-Hoc network with static IP addressing and channel
6) Create a runGrcBox script and add it to the rc.local script
7) Check and activate IP routing"

echo "Detecting your wifi cards. Please connect the wifi dongles...
Press ENTER to start:"
read

DEVICES_INFO=$(nmcli -m multiline -t --fields GENERAL,WIFI-PROPERTIES \
device show)

IFACES=($(echo "${DEVICES_INFO}" | 
  grep GENERAL.DEVICE | sed 's/GENERAL.DEVICE://g' ))
  
TYPES=($(echo "${DEVICES_INFO}" | 
  grep GENERAL.TYPE | sed 's/GENERAL.TYPE://g' ))
XIFS=${IFS} GLOBIGNORE='*';
IFS=$'\r\n';
VENDORS=($(echo "${DEVICES_INFO}" |
  grep GENERAL.VENDOR |  sed 's/GENERAL.VENDOR://g' ))
IFS=${XIFS};

HWADDRS=($(echo "${DEVICES_INFO}" | 
  grep GENERAL.HWADDR | sed 's/GENERAL.HWADDR://g' ))


echo "Naming your WiFi cards"

skip=1;
if [[ -f "${udev_rules_file}" ]]; then
    echo "The file ${udev_rules_file} already exists, do you want overwrite it?(Y/n)"
    read answer;
    if [[ "${answer}" == "n" ]]; then
        echo "Skip naming configuration";
        skip=0;
    else
        rm ${udev_rules_file};
    fi
fi


if [[ ${skip} == 1 ]]; then
    declare -A iface_names;
    n=0;
    n_wifi=0;
    # Iterate over the TYPES array to find wifi interfaces
    # Ask the user a name for every interface
    # Write udev rules
    for type in "${TYPES[@]}" ; do
        if [[ "$type" == "wifi" ]]; then
            
            echo "CARD ${n_wifi}"
            echo -e "\t Iface: ${IFACES[n]}, Type: ${TYPES[n]},
    \t Vendor: ${VENDORS[n]}, MAC: ${HWADDRS[n]}";
            echo -n "Enter the new name for this card:(wlan${n_wifi})";
            read iface_name;
            echo $iface_name;
            if [[ "${iface_name}" == "" ]];
            then                                  
                iface_name="wlan${n_wifi}";
                echo "Default name given:"${iface_name}

            fi;
            line='KERNEL=="wlan*", ';
            line+='ATTR{address}=="'${HWADDRS[${n}]}'", ';
            line+='NAME="'${iface_name}'";';
            iface_names[${iface_name}]=${n};
            n_wifi=$[${n_wifi}+1];
            echo "$line" >> ${udev_rules_file};
        fi
        n=$[$n+1];
    done;
fi;

# If the names weren't modified, used the original names
if [[ -z ${iface_names[@]} ]]; then
    declare -A iface_names;
    for type in "${TYPES[@]}" ; do
        if [[ $type == "wifi" ]]; then
            iface_names[${IFACES[n]}]=${n};
        fi
        n=$[$n+1];
    done;
fi

#hostapd configuration
skip=1;
if [[ -f "${hostapd_config_file}" ]]; then
    echo "The file ${hostapd_config_file} already exists, do you want overwrite it?(Y/n)"
    read answer;
    if [[ "${answer}" == "n" ]]; then
        echo "Skipping hostapd configuration";
        skip=0;
    fi
fi

if [[ ${skip} == 1 ]]; then
    echo "Which interface should be your inner interface?"
    n=0;
    for i in ${!iface_names[@]}; do
        answers[${n}]=${i};
        echo -e "${n})${i}"
        n=$[${n}+1];
    done
    echo "Select inner interface(0-$[${n}-1]):"
    read iface;
    inner_iface=${answers[iface]}
    echo "Write a ssid"
    read ssid;
    echo "Write a channel"
    read channel;
    echo "Configuring hostapd for interface " ${inner_iface}

    echo -e "$(get_hostapd_config ${ssid} ${inner_iface} ${channel})" > ${hostapd_config_file};
fi

#Network configuration

echo "Configuring network and DNSmasq daemon"
skip=1;

if [[ -z "${inner_iface}" ]]; then
    echo "You did not select an inner interface, network won't be configured";
    skip=0;
fi

if [[ ${skip} != 0 && (-f "${network_config_file}" || -f "${dnsmasq_config_file}") ]]; then
    echo "The file ${network_config_file} or ${dnsmasq_config_file} already exists, do you want overwrite both of them?(Y/n)"
    read answer;
    if [[ "${answer}" == "n" ]]; then
        echo "Skipping network and dnsmasq configuration";
        skip=0;
    fi
fi


if [[ ${skip} == 1 ]]; then
    echo "Introduce the network IP address/mask:(192.168.42.0/24)"
    read net_ip_addr_mask;
    if [[ -z "${net_ip_addr_mask}" ]]; then
        net_ip_addr_mask="192.168.42.0/24";
    fi;
    net_ip_addr=${net_ip_addr_mask%/*}
    net_ip_addr=${net_ip_addr%.*}.1;
    net_mask_addr=${net_ip_addr_mask#*/}
    cat /etc/network/interfaces > ${network_config_file};
    echo -e '\n#GRCBox Configuration
'"$(get_network_config "${inner_iface}" ${net_ip_addr})"\
     >> "${network_config_file}";
    echo -e '#GRCBox Configuration
'"$(get_dnsmasq_config ${inner_iface} ${net_ip_addr})"\
    > "${dnsmasq_config_file}";
fi

echo "Checking RockSaw Library installation..."
if [[ ! -f "${jni_lib}/librocksaw.so" ]]; then
    echo -e "librocksaw.so not found. Check your RockSaw library installation.";
else
    echo "librocksaw.so seems to be installed properly.";
fi

echo "Press ENTER to continue";
read ;

echo "Checking Ip routing configuration"
ip_required_lines=('net.ipv4.conf.default.rp_filter=0' \
                    'net.ipv4.conf.all.rp_filter=0' \
                    'net.ipv4.ip_forward=1' \
                    'net.ipv6.conf.all.forwarding=1')
ip_configured="false";
ip_settings=0;
for line in $(</etc/sysctl.conf); do
    for setting in ${ip_required_lines[@]}; do
        if [[ ${line} == ${setting} ]]; then
            ip_settings=$((ip_settings+1));
            break;
        fi
    done;
    if [[ ${ip_settings} == 4 ]]; then
        ip_configured="true";
        echo "IP Routing has been properly configured"
        break;
    fi
done;

if [[ ${ip_configured} != "true" ]]; then
    echo "Ip Routing has not been properly configured"
    echo "Add the following lines to your /etc/sysctl.conf file"
    for line in ${ip_required_lines[@]}; do
        echo ${line};
    done;
fi

echo "Do you want to configure an ad-hoc network? (Y/n)"
read answer;
if [[ ! "${answer}" == "n" ]]; then
    echo "Configure an Ad-Hoc network";
    echo "Which interface should be your Ad-hoc interface?"
    n=0;
    for i in ${!iface_names[@]}; do
        if [[ ! ${i} == ${inner_iface} ]]; then
            answers[${n}]=${i};
            echo -e "${n})${i}"
            n=$[${n}+1];
        fi;
    done
    echo "Select the ad-hoc interface(0-$[${n}-1]):"
    read iface;
    ad_hoc_iface=${answers[iface]}
    echo "Configuring ad-hoc networking for interface " ${ad_hoc_iface};
    echo "Write the SSID of your Ad-Hoc Network:"
    read net_ssid;
    echo 'Write the IP of your ad-hoc interface.
Remember this IP must be unique into the network.'
    read host_ip;
    echo 'Which band should be used? ("bg" or "a")'
    read net_band;
    echo 'Which channel should be used? ("bg" or "a")'
    read channel;
    echo -e "$(get_adhoc_net_config ${net_ssid} ${host_ip} ${net_band} ${channel})" > ad_hoc_config_file;
fi




