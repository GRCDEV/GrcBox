<?xml version="1.0"?>
<!DOCTYPE project [
  <!ENTITY jarmanifest '
          <manifest>
            <section name="com/savarese/rocksaw">
             <attribute name="Specification-Title"
                     value="${name}" />
             <attribute name="Specification-Version"
                     value="${version}" />
             <attribute name="Specification-Vendor"
                     value="${company.name}" />
             <attribute name="Implementation-Title"
                     value="com.savarese.rocksaw" />
             <attribute name="Implementation-Version"
                     value="${version} ${DATE}" />
             <attribute name="Implementation-Vendor"
                     value="${company.name}" />
             <attribute name="Implementation-Vendor-Id"
                     value="${company.id}" />
            </section>
           </manifest>'
  >
]>
<!--
  Copyright 2004-2005 Daniel F. Savarese
  Copyright 2009 Savarese Software Research Corporation
 
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
 
      http://www.savarese.com/software/ApacheLicense-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

Notes:
   This is a build file for use with the Apache Ant build tool.

Prerequisites:

   jakarta-ant from http://ant.apache.org/
         junit from http://www.junit.org/

Build Instructions:
   To build, run

   ant <target>

   in the directory where this file is located with the target you want.

Available targets (default == compile):
 all                  Builds classes, tests, demos, and javadocs.

 clean                Removes build artifacts except for javadocs.
 compile              Compiles the classes and JNI code.
 compile.classes      Compiles only the Java classes.
 compile.jni          Compiles only the JNI code.
 example.compile      Compiles example classes.
 distclean            Removes build artifacts, javadocs, and packaging.

 jar                  Compiles the Java and JNI source and creates a .jar file.
 jar.only             Compiles only the Java source and creates a .jar file.
 javadocs             Creates the API documentation.

 package              Packages up source into self-contained distribution.
 package-prepare      Prepares bin and lib directories for packaging.
 prepare              Creates build directories.

Run ant -projecthelp for complete list of targets with descriptions.
-->

<project default="jar">

  <!-- Allow properties to be overridden. -->
  <property file="${user.home}/.ant.properties"/>
  <property file="dev.properties"/>
  <property file="build.properties"/>

  <available file="${build.src.jni}" type="dir"
             property="jni.src.present"/>

  <!-- Define class paths. -->

  <path id="compile.class.path">
    <pathelement location="${build.dest.java}"/>
    <pathelement location="${classpath.vserv-tcpip}"/>
  </path>

  <path id="example.class.path">
    <path refid="compile.class.path"/>
    <!-- So you can build the examples from the binary distribution. -->
    <pathelement location="${classpath.rocksaw}"/>
  </path>

  <!-- Tokens -->

  <filter token="version" value="${version}"/>

  <!-- all target.  Builds classes, tests, and demos. -->

  <target name="all" depends="example.compile,javadocs,jar"
          description="Builds classes, demos, and javadocs."/>

  <!-- prepare target.  Creates build directory. -->

  <target name="prepare"
          description="Creates build directories.">
      <tstamp>
        <format property="DATE" pattern="yyyy-MM-dd hh:mm:ss" />
      </tstamp>
      <copy todir="${build.dest.java}/META-INF">
        <fileset dir="${top.dir}">
          <include name="LICENSE"/>
        </fileset>
      </copy>
      <mkdir dir="${build.dest.java}"/>
      <mkdir dir="${lib.dir}"/>
  </target>

  <!-- compile.jni target.  Compiles only the JNI code. -->

  <target name="compile.jni" depends="prepare"
          description="Compiles only the JNI code."
          if="jni.src.present">
    <exec dir="${build.src.jni}" executable="${jni.make}">
      <arg line="-f ${jni.makefile} CC='${jni.cc}' EXTRA_CPPFLAGS='${jni.cppflags}' EXTRA_LDFLAGS='${jni.ldflags}' WINSOCK='${jni.winsock}'"/>
    </exec>
    <copy todir="${lib.dir}">
      <fileset dir="${build.src.jni}">
        <include name="*.so"/>
        <include name="*.dll"/>
        <include name="*.jnilib"/>
      </fileset>
    </copy>
    <chmod dir="${lib.dir}" perm="ugo+rx" includes="*.so"/>
  </target>

  <!-- compile.classes target.  Compiles only the Java classes. -->

  <target name="compile.classes" depends="prepare"
          description="Compiles only the Java classes.">
    <javac srcdir="${build.src.java}"
           destdir="${build.dest.java}"
           debug="${javac.debug}"
           deprecation="${javac.deprecation}"
           optimize="${javac.optimize}"
           source="${javac.source}"
           target="${javac.target}"
           excludes="${build.src.java.example}/**"
           classpathref="compile.class.path">
      <compilerarg line="${javac.args}"/>
    </javac>
  </target>

  <!-- compile target.  Compiles the classes and JNI code. -->

  <target name="compile" depends="compile.classes,compile.jni"
          description="Compiles the classes and JNI code."/>

  <!-- example.compile.  Compiles example classes. -->

  <target name="example.compile" depends="compile"
          description="Compiles example classes.">
    <javac srcdir="${build.src.java}"
           destdir="${build.dest.java}"
           debug="${javac.debug}"
           deprecation="${javac.deprecation}"
           optimize="${javac.optimize}"
           source="${javac.source.example}"
           target="${javac.target.example}"
           includes="${build.src.java.example}/**"
           classpathref="example.class.path">
      <compilerarg line="${javac.args}"/>
    </javac>
  </target>

  <!--
   jar.only target.  Compiles only the Java source and creates a .jar file.
  -->

  <target name="jar.only" depends="compile.classes"
          description="Compiles only the Java source and creates a .jar file.">
    <jar jarfile="${lib.dir}/${jar.name}"
         basedir="${build.dest.java}"
         includes="com/**,META-INF/**"
         excludes="**/package.html,**/overview.html">
        &jarmanifest;
    </jar>
  </target>

  <!--
   jar target.  Compiles the Java and JNI sources and creates a .jar file.
  -->

  <target name="jar" depends="jar.only,compile.jni"
      description="Compiles the Java and JNI source and creates a .jar file."/>

  <!-- javadocs target.  Creates the API documentation -->    

  <target name="builddocs" depends="prepare" description="Internal target.">
    <javadoc sourcepath="${javadoc.src}"
             destdir="${javadoc.dest}"
             overview="${build.src.java}/com/savarese/rocksaw/overview.html"
             source="${javac.source.example}"
             author="true"
             version="true"
             windowtitle="${name} ${version} API"
             doctitle="${name} ${version} API"
             header="&lt;a href=&apos;http://www.savarese.com/&apos; target=_top&gt;&lt;img src=&apos;{@docroot}/../images/logoSmall.jpg&apos; alt=&apos;Savarese Software Research Corporation&apos; width=144 height=36 align=center border=0 hspace=1 vspace=1&gt;&lt;/a&gt;"
             bottom="${copyright.message}">
      <classpath refid="compile.class.path"/>
      <package name="example"/>
      <package name="com.savarese.rocksaw.*"/>
    </javadoc>
    <!-- Kluge to fix bad image src. -->
    <replace dir="${javadoc.dest}" token="src='/.." value="src='..">
       <include name="**/*.html"/>
    </replace>
  </target>

  <target name="javadocs" depends="prepare"
          description="Creates the API documentation.">
    <antcall target="builddocs">
      <param name="javadoc.src" value="${build.src.java}"/>
      <param name="javadoc.dest" value="${build.dest.javadoc}"/>
    </antcall>
  </target>

  <!-- Makes an attempt to clean up a little. -->

  <target name="clean.jni"
          description="Removes JNI build artifacts."
          if="jni.src.present">
    <exec dir="${build.src.jni}" executable="${jni.make}">
      <arg line="-f ${jni.makefile} clean"/>
    </exec>
  </target>

  <!-- Makes an attempt to clean up a little. -->

  <target name="clean"
          description="Removes build artifacts except for javadocs.">
    <delete dir="${build.dest.java}"/>
    <delete dir="${build.dest.coverage}"/>
    <delete file="${jar.name}"/>
    <antcall target="clean.jni"/>
  </target>

  <!-- distclean target.  Cleans up for developer, including packaging. -->
  <target name="distclean" depends="clean"
          description="Removes build artifacts, javadocs, and packaging.">
    <delete dir="${build.dest.javadoc}"/>
    <delete dir="${top.dir}/${project.name}"/>
    <delete file="${tarball.src}"/>
    <delete file="${tarball.bin}"/>
    <delete dir="${bin.dir}"/>
    <delete dir="${lib.dir}"/>
  </target>

  <!-- package-prepare target.  Prepares bin and lib directories for
       packaging."
   -->

  <target name="package-prepare"
          description="Prepares bin and lib directories for packaging.">
    <mkdir dir="${lib.dir}"/>
  </target>

  <!-- package target.  Packages up self-contained source for distribution. -->

  <target name="package" depends="distclean,package-prepare,all"
          description="Packages up source into self-contained distribution.">

    <mkdir dir="${project.name}"/>
    <copy todir="${project.name}" filtering="true">
      <fileset dir="${top.dir}" includesfile="pkg.src.inc"
               excludesfile="pkg.src.exc"/>
    </copy>
    <chmod dir="${project.name}" perm="ugo+r" includes="**/**"/>

    <exec executable="tar" dir="${top.dir}">
      <arg line="zcf ${tarball.src} ${project.name}"/>
    </exec>

    <delete dir="${project.name}"/>

    <mkdir dir="${project.name}"/>
    <copy todir="${project.name}">
      <fileset dir="${top.dir}" includesfile="pkg.bin.inc"/>
    </copy>
    <copy file="${top.dir}/README" todir="${project.name}"
          filtering="true" overwrite="true"/>
    <chmod dir="${project.name}" perm="ugo+r" includes="**/**"/>

    <exec executable="tar" dir="${top.dir}">
      <arg line="zcf ${tarball.bin} ${project.name}"/>
    </exec>

    <delete dir="${project.name}"/>

  </target>

</project>
