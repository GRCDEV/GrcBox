#!/bin/bash
hostapd_config_file="hostapd.conf"
hosts_file="hosts"
dnsmasq_config_file="dnsmasq.conf"
network_config_file="interfaces.new"
ad_hoc_config_file="grcBoxAdHoc"
rc_local_config="rc.local"
ad_hoc_ssid="grcBoxAdHoc"
jni_lib="/usr/lib/jni/"

declare -a ad_hoc_configs

#Default config for hostapd daemon
#No password
# ssid inner_iface channel
function get_hostapd_config {
    ssid=$1;
    inner_iface=$2;
    channel=$3;
    echo "interface=${inner_iface}
logger_syslog=1
logger_syslog_level=2
logger_stdout=1
logger_stdout_level=2
ctrl_interface=/var/run/hostapd
ctrl_interface_group=0
ssid=${ssid}
country_code=ES
hw_mode=g
channel=${channel}
max_num_sta=5
";
}

#New section to add to the network configuration
#/etc/network/interfaces
#network_config(iface, ipAddress)
function get_network_config { 
    iface=${1};
    ip=${2};
    echo 'allow-hotplug '${iface}'
iface '${iface}' inet static
    hostapd /etc/hostapd/hostapd.conf
    address '${ip}'
    netmask 255.255.255.0'
}

#Create the dnsmasq configure file
# $1 listen on interface
# $2 Network IPv4 address
function get_dnsmasq_config {
    iface=$1;
    net_ip_addr=$2;
    ip_range="${net_ip_addr%.*}.50,${net_ip_addr%.*}.55"
    echo 'domain-needed
interface='${iface}'
dhcp-range='${ip_range}',12h'
}

#Return a NetworkManager network configuration
#parameters:
#$1 SSID: name of the network
#$2 host Ip address
#$3 band (a, bg)
#$4 channel
function get_adhoc_net_config {
    m_ssid="$1";
    m_ipAddr="$2";
    m_band="$3"
    m_channel="$4";
    DATE=$(date +%s)
    echo '[connection]
id='$m_ssid'
uuid=a2047af8-bc14-492e-9132-cd67'${DATE: -8}'
type=wifi
timestamp=1414165938

[wifi]
ssid='${m_ssid}'
mode=adhoc
band='$m_band'
channel='$m_channel'

[ipv6]
method=auto

[ipv4]
method=manual
address1='$m_ipAddr'/24
'
}

#add some lines to rc.local to activate ad-hoc networks at startup
#$1 connection name
#$2 iface
function get_rc_startup {
    m_conName="$1"
    m_iface="$2"
echo -e '#!/bin/bash
# This is a script to connect to the given network at startup
# it should be included from /etc/rc.local
# generated by GRCBox configuration script'
echo 'while [[ "$(nmcli -t -f NAME connection show --active)" != *"'$m_conName'"* ]]
do
 nmcli con up '$m_conName' ifname '$m_iface'
 sleep 15
done'
}

hostapd_config="/etc/hostapd/hostapd.conf"
dnsmasq_config="/etc/dnsmasq.conf"
network_config="/etc/network/interfaces"
rclocal_config="/etc/rc.local"
hosts_config="/etc/hosts"
#Make a backup of original configuration files
function config_backup {
    #save hostapd changes
    echo "cp  ${hostapd_config} ${hostapd_config##*/}.bak"
    cp  "${hostapd_config}" "${hostapd_config##*/}.bak"
    #save dnsmasq changes
    cp  "${dnsmasq_config}" "${dnsmasq_config##*/}.bak"
    echo cp  "${dnsmasq_config}" "${dnsmasq_config##*/}.bak"
    #save static network configuration changes
    cp  "${network_config}" "${network_config##*/}.bak"
    echo cp  "${network_config}" "${network_config##*/}.bak"
    #save rc.local
    cp "$rclocal_config" "${rclocal_config##*/}.bak"
    echo cp "$rclocal_config" "${rclocal_config##*/}.bak"
    cp "$hosts_config"  "${hosts_config##*/}.bak"
    echo cp "$hosts_config"  "${hosts_config##*/}.bak"
}

#Apply configuration
#$... name of ad-hoc networks to be added to rc.local
function apply_config {
    echo "${@}"
    ad_hoc_networks=("${@}")
    cp ${hostapd_config_file} ${hostapd_config}
    echo mv ${hostapd_config_file} ${hostapd_config}
    cp ${dnsmasq_config_file} ${dnsmasq_config}
    echo mv ${dnsmasq_config_file} ${dnsmasq_config}
    cp ${network_config_file} ${network_config}
    echo mv ${network_config_file} ${network_config}
    for network in "${ad_hoc_networks[@]}"; do
    	echo ${network}
      network_manager_dir="/etc/NetworkManager/system-connections/"
    	#move configuration file to connections dir
    	cp ${network} ${network_manager_dir}
    	echo cp ${network} ${network_manager_dir}
      chmod 600 "${network_manager_dir}/${network}"
      echo chmod 600 "${network_manager_dir}/${network}"
     	script="connect_${network}"
      cp ${script} "/root/"
      echo cp ${script} "/root/"
      script="/root/${script}"
      chmod 700 "${script}"
      echo chmod 700 "${script}"

      #replace the "exit 0"  in the rc.local with the startup script
      # PM: what if there are two ad-hocs????
      script_scaped=$(echo "$script" | sed -e 's/[\/&]/\\&/g')
      srcfile="rc.local"
    	dstfile=${srcfile}.tmp
    	if [[ ! -f "$srcfile" ]]; then
        srcfile="/etc/rc.local";
      fi
    	echo Destfile:${dstfile}
      sed 's/exit 0/'${script_scaped}' \&/g' "${srcfile}" > ${dstfile}
      # PM: what if there are two ad-hocs????
      echo "/root/GrcBox/repository/runGrcBox.sh &" >> ${dstfile}
    	echo "exit 0" >> ${dstfile}
    	mv ${dstfile} "rc.local"
    done;
    cp "rc.local" "/etc/rc.local"
    echo cp "rc.local" "/etc/rc.local"
    cp ${hosts_file} ${hosts_config}
    echo cp ${hosts_file} ${hosts_config}
}

echo -e "_______________________________________________________________________________
* InstalScript: GRCBox installation script.                                   
* This script will guide you through the GrcBox network devices configuration. 
  By default it creates configuration files in the local directory.

It will cover the following steps:
1) Detect your network interfaces and assign them permanent names
2) Give a new SSID to your GrcBox's inner network and configure the hostapd
daemon with the default connfiguration
3) Assign a static IP address to your inner interface and configure dnsmasq to
resolve the name grcbox to that address
4) Configure an Ad-Hoc network with static IP addressing and channel
5) Check and activate IP routing"
6) Create a runGrcBox script and add it to the rc.local script

echo -e "########################################################################

Your current interface naming will be made permanent

Hit ENTER to start configuring this box"

read

echo "Checking RockSaw Library installation..."
if [[ ! -f "${jni_lib}/librocksaw.so" ]]; then
    echo -e "librocksaw.so not found. Check your RockSaw library installation.";
else
    echo "librocksaw.so seems to be installed properly.";
fi

DEVICES_INFO=$(nmcli -m multiline -t --fields GENERAL,WIFI-PROPERTIES device show)

IFACES=($(echo "${DEVICES_INFO}" | grep GENERAL.DEVICE | sed 's/GENERAL.DEVICE://g' ))
TYPES=($(echo "${DEVICES_INFO}" | grep GENERAL.TYPE   | sed 's/GENERAL.TYPE://g' ))
XIFS=${IFS} GLOBIGNORE='*';
IFS=$'\r\n';
VENDORS=($(echo "${DEVICES_INFO}" | grep GENERAL.VENDOR |  sed 's/GENERAL.VENDOR://g' ))
IFS=${XIFS};
HWADDRS=($(echo "${DEVICES_INFO}" | grep GENERAL.HWADDR | sed 's/GENERAL.HWADDR://g' ))

# If the names weren't modified, used the original names
if [[ -z ${iface_names[@]} ]]; then
    declare -A iface_names;
    for type in "${TYPES[@]}" ; do
        if [[ $type == "wifi" ]]; then
            iface_names[${IFACES[n]}]=${n};
        fi
        n=$[$n+1];
    done;
fi

#Write permanent rules for udev
rm /etc/udev/rules.d/70-persistent-net.rules &>/dev/null
for iface in ${!iface_names[@]}; do
   echo 'SUBSYSTEM=="net", ACTION=="add", DRIVERS=="?*", ATTR{address}=="'${HWADDRS[${iface_names[${iface}]}]}'", ATTR{dev_id}=="0x0", ATTR{type}=="1", KERNEL=="wlan*", NAME="'${iface}'"' >> /etc/udev/rules.d/70-persistent-net.rules;
done

#hostapd configuration
printf "Hostapd configuration\n"

echo "Which interface should be your inner interface?"
n=0;
for i in ${!iface_names[@]}; do
    answers[${n}]=${i};
    echo -e "${n})${i}"
    n=$[${n}+1];
done
echo "Select inner interface(0-$[${n}-1]):"
read iface;
inner_iface=${answers[iface]}
echo "Write a SSID"
read ssid;
echo "Write a channel"
read channel;
echo "Configuring hostapd for interface " ${inner_iface}

echo -e "$(get_hostapd_config ${ssid} ${inner_iface} ${channel})" > ${hostapd_config_file};


#Network configuration

echo "Configuring network and DNSmasq daemon"
skip=1;

if [[ -z "${inner_iface}" ]]; then
    echo "You did not select an inner interface, network won't be configured";
    skip=0;
fi

if [[ ${skip} != 0 && (-f "${network_config_file}" || -f "${dnsmasq_config_file}") ]]; then
    echo "The file ${network_config_file} or ${dnsmasq_config_file} already exists, do you want overwrite both of them?(Y/n)"
    read answer;
    if [[ "${answer}" == "n" ]]; then
        echo "Skipping network and dnsmasq configuration";
        skip=0;
    fi
fi


if [[ ${skip} == 1 ]]; then
    echo "Introduce the network IP address/mask:(192.168.42.0/24)"
    read net_ip_addr_mask;
    if [[ -z "${net_ip_addr_mask}" ]]; then
        net_ip_addr_mask="192.168.42.0/24";
    fi;
    net_ip_addr=${net_ip_addr_mask%/*}
    net_ip_addr=${net_ip_addr%.*}.1;
    net_mask_addr=${net_ip_addr_mask#*/}

#    Leaving only loopback device
#    cat /etc/network/interfaces > ${network_config_file};
    printf "# interfaces(5) file used by ifup(8) and ifdown(8)\n#\n# Created by GRCBox installer.\n# Control of the other devices given to Network manager. \n\nauto lo\niface lo inet loopback\n\n" > "${network_config_file}"
    echo -e '\n#GRCBox Configuration
'"$(get_network_config "${inner_iface}" ${net_ip_addr})"\
     >> "${network_config_file}";
    echo -e '#GRCBox Configuration
'"$(get_dnsmasq_config ${inner_iface} ${net_ip_addr})"\
    > "${dnsmasq_config_file}";
    cp /etc/hosts hosts
    echo ${net_ip_addr} grcbox >> hosts
fi

echo "Checking IP routing configuration"
ip_required_lines=('net.ipv4.conf.default.rp_filter=0' \
                    'net.ipv4.conf.all.rp_filter=0' \
                    'net.ipv4.ip_forward=1' \
                    'net.ipv6.conf.all.forwarding=1')
ip_configured="false";
ip_settings=0;
for line in $(</etc/sysctl.conf); do
    for setting in ${ip_required_lines[@]}; do
        if [[ ${line} == ${setting} ]]; then
            ip_settings=$((ip_settings+1));
            break;
        fi
    done;
    if [[ ${ip_settings} == 4 ]]; then
        ip_configured="true";
        echo "IP Routing is already properly configured"
        break;
    fi
done;

if [[ ${ip_configured} != "true" ]]; then
    echo "IP Routing is not properly configured. Adding the following lines to the /etc/sysctl.conf file to enable it"
    echo "# IP routing set-up required by GRCbox" >> /etc/sysctl.conf;
    for line in ${ip_required_lines[@]}; do
        echo ${line};
        echo ${line} >> /etc/sysctl.conf;
    done;
fi

_nadhoc=0
while true; do
echo "Do you want to configure a new ad-hoc network? (Y/n)"
read answer;
   if [[ ! "${answer}" == "n" ]]; then
       echo "Configure an Ad-Hoc network";
       echo "Which interface should be your Ad-hoc interface?"
       n=0;
       for i in ${!iface_names[@]}; do
           if [[ ! ${i} == ${inner_iface} ]]; then
               answers[${n}]=${i};
               echo -e "${n})${i}"
               n=$[${n}+1];
           fi;
       done
       echo "Select the ad-hoc interface(0-$[${n}-1]):"
       read iface;
       ad_hoc_iface=${answers[iface]}
       echo "Configuring ad-hoc networking for interface " ${ad_hoc_iface};
       echo "Write the SSID of your Ad-Hoc Network:"
       read net_ssid;
       echo 'Write the IP of your ad-hoc interface.
Remember this IP must be unique into the network.'
       read host_ip;
       echo 'Which band should be used? ("bg" or "a")'
       read net_band;
       echo 'Which channel should be used? (N)'
       read channel;
       ad_hoc_config_file=${net_ssid};
       ad_hoc_configs[${_nadhoc}]=${net_ssid}
       _nadhoc=$[${_nadhoc}+1]
       echo -e "$(get_adhoc_net_config ${net_ssid} ${host_ip} ${net_band} ${channel})" > ${ad_hoc_config_file};
       echo -e "$(get_rc_startup ${net_ssid} ${ad_hoc_iface})" > connect${net_ssid}
   else
       break
   fi
done

echo -e "*!Configuration files have been generated
Do you want to activate this configuration? (Y/n)"
read answer

if [[ ! "${answer}" == "n" ]]; then
    config_backup
    #move files to their destination
    echo "apply_config ${ad_hoc_configs[*]}"
    apply_config ${ad_hoc_configs[@]}
fi

echo -e "
### Your GRCBox is ready. Reboot it !
"
